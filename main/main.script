local is_paused = false
local mini = 0

local function unloadmusic()
	print("unloadmusic")
	player.unload_music(mini)
end

local function stopmusic()
	print("Stoppped")
	player.stop_music(mini)
end
function init(self)
	profiler.enable_ui(true)
	msg.post(".", "acquire_input_focus")

	go.animate("/go1", "position.y", go.PLAYBACK_LOOP_PINGPONG, 150, go.EASING_OUTCUBIC, 0.5)
	go.animate("/go2", "position.y", go.PLAYBACK_LOOP_PINGPONG, 350, go.EASING_OUTCUBIC, 0.5)
	go.animate("/go3", "position.y", go.PLAYBACK_LOOP_PINGPONG, 150, go.EASING_OUTCUBIC, 0.5)
	go.animate("/go4", "position.y", go.PLAYBACK_LOOP_PINGPONG, 550, go.EASING_OUTCUBIC, 0.5)

	player.build_path("/Users/selimanac/Development/Defold/Native Extension/defold-raudio/res/common")

	mini = player.load_music("/audio/mini.xm")

	local mm = player.load_music("/audio/chiptune_3.mod")
	player.play_music(mm)
	player.music_volume(mm, 0.5)
	pprint(mini)
	player.play_music(mini)
	player.music_volume(mini, 1.0)
	player.music_pitch(mini, 0.5)
	player.music_loop(mini, 2)

	print("Lenght: ", player.music_lenght(mini))
	timer.delay(5, false, unloadmusic)
end

function update(self, dt)
	--	print("Played Time: ", player.music_played(mini))
end

function on_input(self, action_id, action)
	if action_id == hash("click") and action.pressed then
		if is_paused == false then
			player.pause_music(mini)
			is_paused = true
		else
			player.resume_music(mini)
			is_paused = false
		end
		pprint(player.is_music_playing(mini))
	end
end
